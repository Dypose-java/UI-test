plugins {
    id 'java-library'//язык
    id 'io.qameta.allure' version '2.12.0'
}
allure {
    report {
        version.set("2.19.0")
    }
    adapter { // отвечает за появление папочки build/allure-results
        aspectjWeaver.set(true) //обработка аннотации @Step
        frameworks {
            junit5 { //название фреймворка
                adapterVersion.set("2.19.0") //версия интеграции фреймворка и Allure
               // adapterVersion = '2.19.0'
            }
        }
    }
}
repositories {
    mavenCentral()//готовый инструменталий
}
compileTestJava{
    options.encoding='UTF-8'
}

dependencies {
    testImplementation (
            "com.codeborne:selenide:7.4.0",//
            "org.junit.jupiter:junit-jupiter:5.11.0",
            "com.github.javafaker:javafaker:1.0.2",
             'org.assertj:assertj-core:3.26.3',
            "org.slf4j:slf4j-simple:2.0.14",
            'com.google.code.gson:gson:2.10.1',
            'io.qameta.allure:allure-selenide:2.29.1',

            'com.codeborne:pdf-test:1.5.0',
            'com.codeborne:xls-test:1.4.3',
            'com.opencsv:opencsv:5.7.1'

    )//test

}


test {
    //systemProperty "chromeoptions.prefs","intl.accept_languages=en"
    useJUnitPlatform()
}


tasks.register('console', Test) {
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        exceptionFormat "full"
    }
    useJUnitPlatform {
        includeTags("console")
    }
}

tasks.register('selenoid', Test) {
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        exceptionFormat "full"
    }
    useJUnitPlatform {
        includeTags("selenoid")
    }
}


tasks.register('property', Test) {
    systemProperties(System.getProperties())
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        exceptionFormat "full"
    }
    useJUnitPlatform {
        includeTags("property")
    }
}
tasks.register('example_tags', Test) {
    systemProperties(System.getProperties())
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        exceptionFormat "full"
    }
    useJUnitPlatform {
        includeTags("property","property1")
        excludeTags("excludeTags")//теги которые не должны быть в таске
    }
}
tasks.register('property_test', Test) {
    systemProperties(System.getProperties())
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        exceptionFormat "full"
    }
    useJUnitPlatform {
        includeTags("setUp","exampleProrirtiesTest")
    }
}

